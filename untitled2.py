# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SjkHCuqRp2dqn6dEgJeCvVDDe4a_d7Zh
"""

import numpy as np
import cv2 
from matplotlib import pyplot as plt

# def chaotic_map(x, y, z, w, a1=-12, a2=0.05, a3=-0.4, a4=8, a5=-45, a6=-10, num_iters=1000):
#   # creates 2d matrix
#     points = np.zeros((num_iters, 4),dtype=np.float64)
    
#     # x_1=a1x + yz + a2w^2 + a3
#     # y . = a4y − xz + wy
#     # z. =xy+a5z
#     # w. = w + a6z

#     for i in range(num_iters):
#         x_next = np.float64(a1 * x) + np.float64(y * z) + np.float64(a2 * (w**2)) + np.float64(a3)
#         y_next = np.float64(a4 * y) - np.float64(x * z) + np.float64(w * abs(y))
#         z_next = np.float64(x * y) + np.float64(a5 * z)
#         w_next = np.float64(w) + np.float64(a6 * z)

#         x, y, z, w = x_next, y_next, z_next, w_next
#         points[i] = [x, y, z, w]
    
#     return points


# # Initial conditions for the map
# x0, y0, z0, w0 = 0.02, 0.01, 0.03, 0.04

# # Number of iterations
# num_iter = 1000
# points = chaotic_map(x0, y0, z0, w0, num_iters=num_iter)
# print(points)

img = cv2.imread('lena_color_256.tif')
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.axis("off")
plt.show()

height , width = img.shape[:2]
print("The height of the image is: ", height)
print("The width of the image is: ", width)

# mean of the image
mean=np.average(img)

sum_img=np.sum(img)

interupt = mean/((height*width)+sum_img)

print(interupt)



# Initial conditions for the map
x0, y0, z0, w0 = 0.02+interupt, 0.01+interupt, 0.03+interupt, 0.04+interupt
a1=-12+interupt
a2=0.05+interupt
a3=-0.4+interupt
a4=8 +interupt
a5=-45 +interupt
a6=-10+interupt

# Number of iterations
num_iters = height*width
points = np.zeros((num_iters, 4),dtype=np.float64)
    
    # x_1=a1x + yz + a2w^2 + a3
    # y . = a4y − xz + wy
    # z. =xy+a5z
    # w. = w + a6z

for i in range(num_iters):
        x_next = np.float64(a1 * x0) + np.float64(y0 * z0) + np.float64(a2 * (w0**2)) + np.float64(a3)
        y_next = np.float64(a4 * y0) - np.float64(x0 * z0) + np.float64(w0 * abs(y0))
        z_next = np.float64(x0 * y0) + np.float64(a5 * z0)
        w_next = np.float64(w0) + np.float64(a6 * z0)

        x0, y0, z0, w0 = x_next, y_next, z_next, w_next
        points[i] = [x0, y0, z0, w0]

print(points)